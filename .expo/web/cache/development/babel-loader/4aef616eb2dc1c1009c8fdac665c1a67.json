{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/alexander/Project/Aula 16 - Notifica\\xE7\\xF5es - Exemplo documentado/App.js\";\nimport Constants from \"expo-constants\";\nimport * as Notifications from \"expo-notifications\";\nimport * as Permissions from \"expo-permissions\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function App() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"space-around\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Your expo push token: \", expoPushToken), React.createElement(View, {\n    style: {\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Title: \", notification && notification.request.content.title, \" \"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Body: \", notification && notification.request.content.body), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Data:\", \" \", notification && JSON.stringify(notification.request.content.data))), React.createElement(Button, {\n    title: \"Press to schedule a notification\",\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(schedulePushNotification());\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Press to schedule a notification (Remote)\",\n    onPress: function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(sendPushNotification(expoPushToken));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction schedulePushNotification() {\n  return _regeneratorRuntime.async(function schedulePushNotification$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: \"You've got mail! ðŸ“¬\",\n              body: \"Here is the notification body\",\n              data: {\n                data: \"goes here\"\n              }\n            },\n            trigger: {\n              seconds: 2\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction sendPushNotification(expoPushToken) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: \"default\",\n            title: \"Remoto via fetch\",\n            body: \"And here is the body!\",\n            data: {\n              data: \"goes here\"\n            }\n          };\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://exp.host/--/api/v2/push/send\", {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Accept-encoding\": \"gzip, deflate\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context6.next = 21;\n            break;\n          }\n\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context6.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== \"granted\")) {\n            _context6.next = 12;\n            break;\n          }\n\n          _context6.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context6.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== \"granted\")) {\n            _context6.next = 15;\n            break;\n          }\n\n          alert(\"Failed to get push token for push notification!\");\n          return _context6.abrupt(\"return\");\n\n        case 15:\n          _context6.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context6.sent.data;\n          console.log(token);\n          _context6.next = 22;\n          break;\n\n        case 21:\n          alert(\"Must use physical device for Push Notifications\");\n\n        case 22:\n          if (Platform.OS === \"android\") {\n            Notifications.setNotificationChannelAsync(\"default\", {\n              name: \"default\",\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: \"#FF231F7C\"\n            });\n          }\n\n          return _context6.abrupt(\"return\", token);\n\n        case 24:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/alexander/Project/Aula 16 - NotificaÃ§Ãµes - Exemplo documentado/App.js"],"names":["Constants","Notifications","Permissions","React","useState","useEffect","useRef","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","App","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","flex","alignItems","justifyContent","request","content","title","body","JSON","stringify","data","schedulePushNotification","sendPushNotification","scheduleNotificationAsync","trigger","seconds","message","to","sound","fetch","method","headers","Accept","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;;;AAcAL,aAAa,CAACM,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAa;AAC/BC,cAAAA,eAAe,EAAE,IADc;AAE/BC,cAAAA,eAAe,EAAE,KAFc;AAG/BC,cAAAA,cAAc,EAAE;AAHe,aAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;AAWA,eAAe,SAASC,GAAT,GAAe;AAAA,kBAIcR,QAAQ,CAAC,EAAD,CAJtB;AAAA;AAAA,MAIrBS,aAJqB;AAAA,MAINC,gBAJM;;AAAA,mBAKYV,QAAQ,CAAC,KAAD,CALpB;AAAA;AAAA,MAKrBW,YALqB;AAAA,MAKPC,eALO;;AAU5B,MAAMC,oBAAoB,GAAGX,MAAM,EAAnC;AACA,MAAMY,gBAAgB,GAAGZ,MAAM,EAA/B;AAMAD,EAAAA,SAAS,CAAC,YAAM;AAEdc,IAAAA,iCAAiC,GAAGC,IAApC,CACE,UAACC,KAAD;AAAA,aAAWP,gBAAgB,CAACO,KAAD,CAA3B;AAAA,KADF;AAKAJ,IAAAA,oBAAoB,CAACK,OAArB,GAA+BrB,aAAa,CAACsB,+BAAd,CAC7B,UAACR,YAAD,EAAkB;AAChBC,MAAAA,eAAe,CAACD,YAAD,CAAf;AACD,KAH4B,CAA/B;AAMAG,IAAAA,gBAAgB,CAACI,OAAjB,GAA2BrB,aAAa,CAACuB,uCAAd,CACzB,UAACC,QAAD,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,KAHwB,CAA3B;AAYA,WAAO,YAAM;AACXxB,MAAAA,aAAa,CAAC2B,8BAAd,CAA6CX,oBAA7C;AACAhB,MAAAA,aAAa,CAAC2B,8BAAd,CAA6CV,gBAA7C;AACD,KAHD;AAID,GA7BQ,EA6BN,EA7BM,CAAT;AAkCA,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLW,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,cAAc,EAAE;AAHX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA6BlB,aAA7B,CAPF,EASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEiB,MAAAA,UAAU,EAAE,QAAd;AAAwBC,MAAAA,cAAc,EAAE;AAAxC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUhB,YAAY,IAAIA,YAAY,CAACiB,OAAb,CAAqBC,OAArB,CAA6BC,KADvD,EAC8D,GAD9D,CADF,EAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAanB,YAAY,IAAIA,YAAY,CAACiB,OAAb,CAAqBC,OAArB,CAA6BE,IAA1D,CAJF,EAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACQ,GADR,EAEGpB,YAAY,IAAIqB,IAAI,CAACC,SAAL,CAAetB,YAAY,CAACiB,OAAb,CAAqBC,OAArB,CAA6BK,IAA5C,CAFnB,CALF,CATF,EAoBE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,kCADR;AAEE,IAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACDC,wBAAwB,EADvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,EA2BE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,2CADR;AAEE,IAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACDC,oBAAoB,CAAC3B,aAAD,CADnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CADF;AAoCD;;AAKD,SAAe0B,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQtC,aAAa,CAACwC,yBAAd,CAAwC;AAE5CR,YAAAA,OAAO,EAAE;AACPC,cAAAA,KAAK,EAAE,qBADA;AAEPC,cAAAA,IAAI,EAAE,+BAFC;AAGPG,cAAAA,IAAI,EAAE;AAAEA,gBAAAA,IAAI,EAAE;AAAR;AAHC,aAFmC;AAO5CI,YAAAA,OAAO,EAAE;AAAEC,cAAAA,OAAO,EAAE;AAAX;AAPmC,WAAxC,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAeH,oBAAf,CAAoC3B,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQ+B,UAAAA,OAJR,GAIkB;AACdC,YAAAA,EAAE,EAAEhC,aADU;AAEdiC,YAAAA,KAAK,EAAE,SAFO;AAGdZ,YAAAA,KAAK,EAAE,kBAHO;AAIdC,YAAAA,IAAI,EAAE,uBAJQ;AAKdG,YAAAA,IAAI,EAAE;AAAEA,cAAAA,IAAI,EAAE;AAAR;AALQ,WAJlB;AAAA;AAAA,2CAeQS,KAAK,CAAC,sCAAD,EAAyC;AAClDC,YAAAA,MAAM,EAAE,MAD0C;AAElDC,YAAAA,OAAO,EAAE;AACPC,cAAAA,MAAM,EAAE,kBADD;AAEP,iCAAmB,eAFZ;AAGP,8BAAgB;AAHT,aAFyC;AAOlDf,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeO,OAAf;AAP4C,WAAzC,CAfb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BA,SAAezB,iCAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eAEMnB,SAAS,CAACmD,QAFhB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAG6CjD,WAAW,CAACkD,QAAZ,CACvClD,WAAW,CAACmD,aAD2B,CAH7C;;AAAA;AAAA;AAGoBC,UAAAA,cAHpB,yBAGYC,MAHZ;AAMQC,UAAAA,WANR,GAMsBF,cANtB;;AAAA,gBAOQA,cAAc,KAAK,SAP3B;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAQ+BpD,WAAW,CAACuD,QAAZ,CAAqBvD,WAAW,CAACmD,aAAjC,CAR/B;;AAAA;AAAA;AAQcE,UAAAA,MARd,yBAQcA,MARd;AASMC,UAAAA,WAAW,GAAGD,MAAd;;AATN;AAAA,gBAWQC,WAAW,KAAK,SAXxB;AAAA;AAAA;AAAA;;AAYME,UAAAA,KAAK,CAAC,iDAAD,CAAL;AAZN;;AAAA;AAAA;AAAA,2CAemBzD,aAAa,CAAC0D,qBAAd,EAfnB;;AAAA;AAeItC,UAAAA,KAfJ,kBAe0DiB,IAf1D;AAgBIZ,UAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AAhBJ;AAAA;;AAAA;AAkBIqC,UAAAA,KAAK,CAAC,iDAAD,CAAL;;AAlBJ;AAqBE,cAAIE,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B5D,YAAAA,aAAa,CAAC6D,2BAAd,CAA0C,SAA1C,EAAqD;AACnDC,cAAAA,IAAI,EAAE,SAD6C;AAEnDC,cAAAA,UAAU,EAAE/D,aAAa,CAACgE,iBAAd,CAAgCC,GAFO;AAGnDC,cAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAHiC;AAInDC,cAAAA,UAAU,EAAE;AAJuC,aAArD;AAMD;;AA5BH,4CA8BS/C,KA9BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import Constants from \"expo-constants\";\nimport * as Notifications from \"expo-notifications\";\nimport * as Permissions from \"expo-permissions\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Text, View, Button, Platform } from \"react-native\";\n\n/**\n * Lembrar dos 3 passos:\n *  1) Obter o token (funÃ§Ã£o pronta)\n *  2) Enviar a notificaÃ§Ã£o: pode ser local ou remota\n *  3) Responder Ã  notificaÃ§Ã£o\n */\n\n/**\n * ConfiguraÃ§Ãµes gerais:\n * - O que fazer quando chega uma notificaÃ§Ã£o? exibir um alerta? um som? etc.\n */\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n/**\n * Componente principal App\n */\nexport default function App() {\n  /**\n   * Estado da aplicaÃ§Ã£o (state)\n   */\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\n  const [notification, setNotification] = useState(false);\n\n  /**\n   * ReferÃªncias aos objetos \"ouvintes\" (listeners)\n   */\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  /**\n   * Efeito colateral, lembra do ciclo de vida da aplicaÃ§Ã£o (aula 5)? componentDidMount?\n   * useEffect Ã© a forma \"hook\" de fazer isso =)\n   */\n  useEffect(() => {\n    //Passo 1: obtenÃ§Ã£o do token\n    registerForPushNotificationsAsync().then(\n      (token) => setExpoPushToken(token) //salvar o token no estado (state)\n    );\n\n    //Terceiro passo (avisar a aplicaÃ§Ã£o que chegou uma nova notificaÃ§Ã£o)\n    notificationListener.current = Notifications.addNotificationReceivedListener(\n      (notification) => {\n        setNotification(notification); //armazenar a notificaÃ§Ã£o no estado (state)\n      }\n    );\n    //Terceiro passo (evento executado quando o usuÃ¡rio clica na notificaÃ§Ã£o)\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(\n      (response) => {\n        console.log(response);\n      }\n    );\n\n    /**\n     * Descadastrar-se (parar de ouvir) do sistema de notificaÃ§Ãµes.\n     * Lembra-se do \"fim\" do ciclo de vida (quando o componente vai ser removido)? componentWillUnmount?\n     * O retorno do hook useEffect Ã© uma funÃ§Ã£o (lambda) responsÃ¡vel pela limpeza/encerramento\n     * de serviÃ§os.\n     * */\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n\n  /**\n   * RenderizaÃ§Ã£o (padrÃ£o do react/jsx)\n   */\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"space-around\",\n      }}\n    >\n      <Text>Your expo push token: {expoPushToken}</Text>\n\n      <View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n        <Text>\n          Title: {notification && notification.request.content.title}{\" \"}\n        </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>\n          Data:{\" \"}\n          {notification && JSON.stringify(notification.request.content.data)}\n        </Text>\n      </View>\n\n      <Button\n        title=\"Press to schedule a notification\"\n        onPress={async () => {\n          await schedulePushNotification(); //Segundo Passo: lanÃ§ar a notificaÃ§Ã£o (local)\n        }}\n      />\n\n      <Button\n        title=\"Press to schedule a notification (Remote)\"\n        onPress={async () => {\n          await sendPushNotification(expoPushToken); //Segundo Passo: lanÃ§ar a notificaÃ§Ã£o (remoto, via API)\n        }}\n      />\n    </View>\n  );\n}\n\n/**\n * Passo 2: LOCAL (o prÃ³prio App dispara a notificaÃ§Ã£o)\n */\nasync function schedulePushNotification() {\n  await Notifications.scheduleNotificationAsync({\n    //O que enviar junto com a notificaÃ§Ã£o? tÃ­tulo, mensagem (body), etc.\n    content: {\n      title: \"You've got mail! ðŸ“¬\",\n      body: \"Here is the notification body\",\n      data: { data: \"goes here\" },\n    },\n    trigger: { seconds: 2 }, //quanto tempo esperar antes de lanÃ§ar a notificaÃ§Ã£o?\n  });\n}\n\n/**\n * Passo 2: REMOTO (a notificaÃ§Ã£o Ã© disparada por um agente externo, via Push)\n */\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/dashboard/notifications\nasync function sendPushNotification(expoPushToken) {\n  /**\n   * Isso Ã© o que importa: o que vocÃª quer mandar para a notificaÃ§Ã£o? tÃ­tulo, mensagem, som, etc.\n   */\n  const message = {\n    to: expoPushToken,\n    sound: \"default\",\n    title: \"Remoto via fetch\",\n    body: \"And here is the body!\",\n    data: { data: \"goes here\" },\n  };\n\n  /**\n   * NÃ£o se preocupe com isso ainda.. vamos aprender tudo sobre APIs na aula sobre REST =)\n   */\n  await fetch(\"https://exp.host/--/api/v2/push/send\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Accept-encoding\": \"gzip, deflate\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(message),\n  });\n}\n\n/**\n * Passo 1: obtenÃ§Ã£o do token (mÃ©todo pronto)\n */\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Permissions.getAsync(\n      Permissions.NOTIFICATIONS\n    );\n    let finalStatus = existingStatus;\n    if (existingStatus !== \"granted\") {\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n      finalStatus = status;\n    }\n    if (finalStatus !== \"granted\") {\n      alert(\"Failed to get push token for push notification!\");\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    alert(\"Must use physical device for Push Notifications\");\n  }\n\n  if (Platform.OS === \"android\") {\n    Notifications.setNotificationChannelAsync(\"default\", {\n      name: \"default\",\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: \"#FF231F7C\",\n    });\n  }\n\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}